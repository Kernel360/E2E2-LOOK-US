'use client'

import React, { useState, useEffect } from 'react'
import { HexColorPicker } from 'react-colorful'
import { useRouter } from 'next/navigation'
import { API_PUBLIC_URL } from '@/app/_common/constants'

const sections = [
    { name: 'ÏïÑÏö∞ÌÑ∞', category: 'outer' },
    { name: 'ÏÉÅÏùò', category: 'top' },
    { name: 'Î∞îÏßÄ', category: 'pants' },
    { name: 'ÏõêÌîºÏä§/ÏÑ∏Ìä∏', category: 'dress' },
    { name: 'Ïä§Ïª§Ìä∏', category: 'skirt' },
    { name: 'Ïã†Î∞ú', category: 'shoe' },
    { name: 'Í∞ÄÎ∞©', category: 'bag' },
    { name: 'Ï£ºÏñºÎ¶¨/Ïû°Ìôî', category: 'accessory' },
    { name: 'Î™®Ïûê', category: 'hat' },
]

const ColorSelectionPage: React.FC = () => {
    const [selectedColors, setSelectedColors] = useState<{
        [key: string]: string
    }>({})
    const [currentSection, setCurrentSection] = useState<string | null>(null)
    const [hoveredSection, setHoveredSection] = useState<string | null>(null)
    const [tempColor, setTempColor] = useState<string>('#ffffff')
    const [isClient, setIsClient] = useState<boolean>(false) // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó¨Î∂Ä ÌôïÏù∏ üéÄ
    const router = useRouter() // Next.jsÏùò useRouter ÌõÖÏùÑ ÏÇ¨Ïö©Ìï¥Ïöî üéÄ

    useEffect(() => {
        setIsClient(true) // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Î†åÎçîÎßÅÎêú ÌõÑ ÏÑ§Ï†ïÌï¥Ïöî üéÄ
    }, [])

    const handleColorChange = (color: string) => {
        setTempColor(color)
    }

    const applyColor = () => {
        if (currentSection) {
            setSelectedColors(prevColors => ({
                ...prevColors,
                [currentSection]: tempColor,
            }))
            setCurrentSection(null) // ÏÑ†ÌÉù ÌõÑ Ï∞ΩÏùÑ Îã´ÏïÑÏ§å
        }
    }

    const getTextColor = (bgColor: string) => {
        const brightness =
            parseInt(bgColor.substring(1, 3), 16) * 0.299 +
            parseInt(bgColor.substring(3, 5), 16) * 0.587 +
            parseInt(bgColor.substring(5, 7), 16) * 0.114
        return brightness > 150 ? '#000000' : '#FFFFFF'
    }

    const handleGoBack = () => {
        router.back() // Ïù¥Ï†Ñ ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌï¥Ïöî üéÄ
    }

    const rgbToIntArray = (color: string) => {
        const r = parseInt(color.slice(1, 3), 16)
        const g = parseInt(color.slice(3, 5), 16)
        const b = parseInt(color.slice(5, 7), 16)
        return [r, g, b]
    }

    const onClickSearchBtn = () => {
        // sendColorAndCategory(tempColor)
        console.log(tempColor)
    }

    const sendColorAndCategory = async (color: string) => {
        const rgbColor = rgbToIntArray(color)
        const data = {
            rgbColor,
        }
        try {
            const response = await fetch(`${API_PUBLIC_URL}/posts`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            })

            if (response.ok) {
                const result = await response.json()
                console.log('Í≤ÄÏÉâ Í≤∞Í≥º:', result)
            } else {
                console.error('Í≤ÄÏÉâ ÏöîÏ≤≠ Ïã§Ìå®:', response.statusText)
            }
        } catch (error) {
            console.error('Í≤ÄÏÉâ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error)
        }
    }

    return (
        <div
            style={{
                width: '100%',
                height: `100vh`, // ÌôîÎ©¥ Ï†ÑÏ≤¥ ÎÜíÏù¥
                margin: '0 auto',
                textAlign: 'center',
                backgroundColor: '#f5f5f5',
                overflowY: 'scroll', // ÏÑ∏Î°ú Ïä§ÌÅ¨Î°§ ÏÑ§Ï†ï
                display: 'flex',
                flexDirection: 'column',
                position: 'relative', // Î≤ÑÌäº ÏúÑÏπòÎ•º ÏÑ§Ï†ïÌïòÍ∏∞ ÏúÑÌï¥ Ï∂îÍ∞Ä
            }}
        >
            {sections.map((section, index) => {
                const isHovered = hoveredSection === section.name

                const isAbove =
                    isClient &&
                    window.innerHeight / 2 <
                        (index + 1) * (window.innerHeight / sections.length) // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥ÎìúÏóêÏÑúÎßå Ïã§Ìñâ üéÄ

                return (
                    <div
                        key={index}
                        style={{
                            position: 'relative',
                            flex: '1',
                            width: '100%', // Width Í≥†Ï†ï
                            backgroundColor:
                                selectedColors[section.name] || '#ffffff',
                            color: selectedColors[section.name]
                                ? getTextColor(selectedColors[section.name])
                                : '#000000',
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                            cursor: 'pointer',
                            transition: 'all 0.5s ease',
                            fontWeight: isHovered ? '700' : '300',
                            fontSize: isHovered ? '25px' : '16px',
                            height: isHovered ? '1.2em' : '1em', // Hover Ïãú height Ï¶ùÍ∞Ä
                            zIndex: isHovered ? 10 : 1, // Ìò∏Î≤ÑÎêú ÏÑπÏÖòÏù¥ Îã§Î•∏ ÏÑπÏÖò ÏúÑÏóê Ïò§ÎèÑÎ°ù ÏÑ§Ï†ï
                        }}
                        onMouseEnter={() => setHoveredSection(section.name)}
                        onMouseLeave={() => setHoveredSection(null)}
                        onClick={() => setCurrentSection(section.name)}
                    >
                        {section.name}
                        {currentSection === section.name && (
                            <div
                                style={{
                                    position: 'absolute',
                                    left: '50%',
                                    transform: 'translateX(-50%)',
                                    top: isAbove ? 'auto' : '100%', // ÌôîÎ©¥ ÏúÑÏπòÏóê Îî∞Îùº ÏúÑ/ÏïÑÎûòÏóê ÎÇòÌÉÄÎÇòÎèÑÎ°ù
                                    bottom: isAbove ? '100%' : 'auto', // ÌôîÎ©¥ ÏúÑÏπòÏóê Îî∞Îùº ÏúÑ/ÏïÑÎûòÏóê ÎÇòÌÉÄÎÇòÎèÑÎ°ù
                                    padding: '10px',
                                    backgroundColor: '#fff',
                                    boxShadow:
                                        '0px 4px 12px rgba(0, 0, 0, 0.1)',
                                    borderRadius: '8px',
                                    zIndex: 20, // Ïª¨Îü¨ ÌîºÏª§Í∞Ä Ìï≠ÏÉÅ ÏµúÏÉÅÎã®Ïóê ÎÇòÌÉÄÎÇòÎèÑÎ°ù ÏÑ§Ï†ï
                                    display: 'flex',
                                    flexDirection: 'column',
                                    alignItems: 'center',
                                }}
                            >
                                <HexColorPicker
                                    color={tempColor}
                                    onChange={handleColorChange}
                                    style={{
                                        marginBottom: '8px',
                                        width: '200px',
                                        height: '150px',
                                    }}
                                />
                                <button
                                    style={{
                                        width: '80px',
                                        height: '30px',
                                        borderRadius: '4px',
                                        backgroundColor: '#4caf50',
                                        color: '#ffffff',
                                        fontSize: '16px',
                                        fontWeight: 'bold',
                                        border: 'none',
                                        cursor: 'pointer',
                                    }}
                                    onClick={() => {
                                        applyColor()
                                    }}
                                >
                                    ÌôïÏù∏
                                </button>
                            </div>
                        )}
                    </div>
                )
            })}
            <div
                style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    position: 'fixed', // ÌôîÎ©¥Ïóê Í≥†Ï†ïÎêòÎèÑÎ°ù ÏÑ§Ï†ï
                    width: '100%',
                    top: '50%', // ÌôîÎ©¥Ïùò Ï§ëÍ∞Ñ ÎÜíÏù¥Ïóê ÏúÑÏπòÌïòÎèÑÎ°ù ÏÑ§Ï†ï
                    transform: 'translateY(-50%)', // Ï†ïÌôïÌûà Ï§ëÏïôÏóê ÎßûÏ∂îÍ∏∞ ÏúÑÌïú transform
                    zIndex: 100, // Î≤ÑÌäºÏù¥ Îã§Î•∏ ÏöîÏÜåÎì§ ÏúÑÏóê Í≤πÏ≥êÏßÄÎèÑÎ°ù z-indexÎ•º ÎÜíÏûÑ
                    padding: '0 20px', // Î≤ÑÌäºÍ≥º ÌôîÎ©¥ ÎÅù ÏÇ¨Ïù¥Ïùò Ïó¨Î∞±ÏùÑ ÏÑ§Ï†ï
                }}
            >
                <button
                    onClick={handleGoBack}
                    style={{
                        fontSize: '40px', // Î≤ÑÌäº ÌÅ¨Í∏∞Î•º Ï†ÅÎãπÌûà ÌÇ§Ïõ†Ïñ¥Ïöî
                        background: 'none',
                        border: 'none',
                        cursor: 'pointer',
                        outline: 'none', // Ìè¨Ïª§Ïä§ Ïãú ÎÇòÌÉÄÎÇòÎäî Í∏∞Î≥∏ ÌÖåÎëêÎ¶¨ Ï†úÍ±∞
                    }}
                >
                    ‚¨ÖÔ∏è
                </button>
                <button
                    onClick={() => onClickSearchBtn()}
                    style={{
                        fontSize: '40px', // Î≤ÑÌäº ÌÅ¨Í∏∞Î•º Ï†ÅÎãπÌûà ÌÇ§Ïõ†Ïñ¥Ïöî
                        background: 'none',
                        border: 'none',
                        cursor: 'pointer',
                        outline: 'none', // Ìè¨Ïª§Ïä§ Ïãú ÎÇòÌÉÄÎÇòÎäî Í∏∞Î≥∏ ÌÖåÎëêÎ¶¨ Ï†úÍ±∞
                    }}
                >
                    ‚û°Ô∏è
                </button>
            </div>
        </div>
    )
}

export default ColorSelectionPage
